---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/7/27 0027 10:37
---

local DatingDayView = class("DatingDayView",BaseLayer)

function DatingDayView:initData()
    self.roleId = RoleDataMgr:getCurId()
    self.buildData_ = RoleDataMgr:getDayBuildList(self.roleId)
    self.buildItemsList_ = {}
end


function DatingDayView:ctor()
    self.super.ctor(self)

    self:initData()

    self:init("lua.uiconfig.dating.datingDayView")
end

function DatingDayView:initUI(ui)
    self.super.initUI(self,ui)

    self.ui = ui

    self.Button_give = TFDirector:getChildByPath(self.ui, "Button_give")

    self:initPrefab()
    self:initScroll()
end

function DatingDayView:initPrefab()
    self.Panel_item = TFDirector:getChildByPath(self.ui,"Panel_item")
end

function DatingDayView:initScroll()
    local ScrollView_main = TFDirector:getChildByPath(self.ui, "ScrollView_main")
    self.TurnView_dayDating = UITurnView:create(ScrollView_main)
    self.TurnView_dayDating:setItemModel(self.Panel_item)

    self:showScroll()

    --self.TurnView_dayDating:scrollToItem(math.ceil(#self.buildData_/2))
end

function DatingDayView:showScroll()
    for i, v in ipairs(self.buildData_) do
        if not self.buildItemsList_[i] then
            self:addDailyBuildItem(i)
        end

        self:updatePlotBuildItem(i)
    end
end

function DatingDayView:addDailyBuildItem(idx)
    local item = self.TurnView_dayDating:pushBackItem()
    local foo = {}
    foo.root = item
    --foo.Image_icon = TFDirector:getChildByPath(foo.root, "Image_icon")

    foo.Panel_touch = TFDirector:getChildByPath(foo.root, "Panel_touch")
    foo.m = TFDirector:getChildByPath(foo.root,"Panel_mainItem"):hide()
    foo.c = TFDirector:getChildByPath(foo.root,"Panel_cItem")

    self.buildItemsList_[idx] = foo
    return foo.root
end

function DatingDayView:updatePlotBuildItem(idx)
    local foo = self.buildItemsList_[idx]

    self:updateCItem(foo.c,self.buildData_[idx])

    foo.Panel_touch:onClick(function()
        self.TurnView_dayDating:scrollToItem(idx)
    end)
end

function DatingDayView:updateCItem(item,buildData)
    local buildId = buildData.id
    local nameId = buildData.nameId
    local isFavorPass = buildData.isFavorPass
    local isFubenPass = buildData.isFubenPass
    local daytime = buildData.daytime
    local endInfo = DatingDataMgr:getBuildDayScripInfo(buildId)

    local Image_main = TFDirector:getChildByPath(item, "Image_main")
    local Image_icon = TFDirector:getChildByPath(Image_main, "Image_icon")
    local iconPath = DatingDataMgr:getBuildIcon2(buildId)
    Image_icon:setTexture(iconPath)
    Image_icon:Size(170,260)
    local Label_jindu = TFDirector:getChildByPath(Image_main, "Label_jindu")
    local num = DatingDataMgr:getEndFinishIdList(endInfo) and #DatingDataMgr:getEndFinishIdList(endInfo) or 0
    local maxNum = DatingDataMgr:getEndIdList(endInfo) and #DatingDataMgr:getEndIdList(endInfo) or 0
    Label_jindu:setText(num .. "/" .. maxNum)
    local Label_title = TFDirector:getChildByPath(Image_main, "Label_title")
    local nameStr = ""
    if endInfo.titleName and endInfo.titleName ~= 0 then
        nameStr = TextDataMgr:getTextAttr(endInfo.titleName).text
    else
        nameStr = TextDataMgr:getTextAttr(nameId).text
    end
    Label_title:setText(nameStr)

    local Panel_lock = TFDirector:getChildByPath(item, "Panel_lock"):hide()
    local Label_lock = TFDirector:getChildByPath(Panel_lock, "Label_lock")

    item.isUnLock = true
    item.isStart = true

    print("buildId ",buildId)
    print("daytime ",daytime)

    if not isFubenPass or not isFavorPass then
        Panel_lock:show()
        if not isFavorPass then
            Label_lock:setTextById(950055,buildData.enter_condition.favor)
        elseif not isFubenPass then
            local name = FubenDataMgr:getLevelName(buildData.enter_condition.pass) or ""
            Label_lock:setTextById(950056,name)
        end
        item.isUnLock = false
    end
end

function DatingDayView:selectOption()
    local idx = self.TurnView_dayDating:getSelectIndex()

    if not self.buildItemsList_[idx].c.isStart then
        Utils:showTips(900049)
    elseif not self.buildItemsList_[idx].c.isUnLock then
        Utils:showTips(900212)
    else
        DatingDataMgr:sendGetSciptMsg(EC_DatingScriptType.DAY_SCRIPT,nil,self.buildData_[idx].id)
    end
end

function DatingDayView:onDatingDayUpdate()
    self.buildData_ = RoleDataMgr:getDayBuildList(self.roleId)
    self:showScroll()
end

function DatingDayView:onPlotTurnViewSelect(target, selectIndex)
    local items = target:getItem()
    for i, v in ipairs(items) do
        local foo = self.buildItemsList_[i]
        local isSelect = (i == selectIndex)
    end
end

function DatingDayView:registerEvents()
    EventMgr:addEventListener(self, EV_NEW_CITY.cityUpdate, handler(self.onDatingDayUpdate, self))

    local function scrollCallback(target, offsetRate, customOffsetRate)
        local items = target:getItem()
        for i, item in ipairs(items) do
            local rate = offsetRate[i]
            local rrate = 1 - rate
            local customRate = customOffsetRate[i]
            local rCustomRate = 1 - customRate
            item:setOpacity(255 * rrate)
            item:setPositionZ(-customRate * 100)
            item:setZOrder(rrate * 100)
        end
    end

    self.TurnView_dayDating:registerScrollCallback(scrollCallback)
    self.TurnView_dayDating:registerSelectCallback(handler(self.onPlotTurnViewSelect, self))

    self.Button_give:onClick(function()
        self:selectOption()
    end)
end

function DatingDayView:setCloseCallback(callBack)
    self.closeCallBack = callBack
end

function DatingDayView:onClose()
    self.super.onClose(self)

    if self.closeCallBack then
        self.closeCallBack()
    end
end


return DatingDayView